22-10-28 16:46:46.091 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: None
    pretrained_netE: None
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

22-10-28 16:46:46.114 : Number of train images: 800, iters: 25
22-10-28 16:46:47.457 : 
Networks name: MSRResNet0
Params number: 1332928
Net structure:
MSRResNet0(
  (model): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Identity + 
    |Sequential(
    |  (0): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (1): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (2): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (3): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (4): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (5): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (6): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (7): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (8): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (9): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (10): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (11): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (12): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (13): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (14): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (15): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |)
    (2): Upsample(scale_factor=2.0, mode=nearest)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace=True)
    (5): Upsample(scale_factor=2.0, mode=nearest)
    (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
)

22-10-28 16:46:47.486 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.000 | -0.074 |  0.087 |  0.025 | torch.Size([64, 3, 3, 3]) || model.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.0.bias
 | -0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.0.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.0.res.0.bias
 |  0.000 | -0.034 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.0.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.0.res.2.bias
 | -0.000 | -0.036 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.1.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.1.res.0.bias
 |  0.000 | -0.031 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.1.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.1.res.2.bias
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.2.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.2.res.0.bias
 | -0.000 | -0.031 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.2.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.2.res.2.bias
 | -0.000 | -0.034 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.3.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.3.res.0.bias
 |  0.000 | -0.037 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.3.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.3.res.2.bias
 |  0.000 | -0.034 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.4.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.4.res.0.bias
 |  0.000 | -0.033 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.4.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.4.res.2.bias
 | -0.000 | -0.034 |  0.032 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.5.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.5.res.0.bias
 | -0.000 | -0.033 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.5.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.5.res.2.bias
 |  0.000 | -0.034 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.6.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.6.res.0.bias
 |  0.000 | -0.033 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.6.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.6.res.2.bias
 |  0.000 | -0.038 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.7.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.7.res.0.bias
 | -0.000 | -0.032 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.7.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.7.res.2.bias
 |  0.000 | -0.038 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.8.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.8.res.0.bias
 | -0.000 | -0.040 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.8.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.8.res.2.bias
 |  0.000 | -0.037 |  0.036 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.9.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.9.res.0.bias
 |  0.000 | -0.034 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.9.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.9.res.2.bias
 |  0.000 | -0.031 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.10.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.10.res.0.bias
 |  0.000 | -0.033 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.10.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.10.res.2.bias
 |  0.000 | -0.032 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.11.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.11.res.0.bias
 | -0.000 | -0.031 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.11.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.11.res.2.bias
 | -0.000 | -0.031 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.12.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.12.res.0.bias
 |  0.000 | -0.034 |  0.040 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.12.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.12.res.2.bias
 |  0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.13.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.13.res.0.bias
 | -0.000 | -0.035 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.13.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.13.res.2.bias
 | -0.000 | -0.035 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.14.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.14.res.0.bias
 | -0.000 | -0.035 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.14.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.14.res.2.bias
 |  0.000 | -0.034 |  0.038 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.15.res.0.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.15.res.0.bias
 |  0.000 | -0.033 |  0.037 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.15.res.2.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.15.res.2.bias
 |  0.000 | -0.034 |  0.033 |  0.008 | torch.Size([64, 64, 3, 3]) || model.1.sub.16.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.1.sub.16.bias
 | -0.000 | -0.034 |  0.035 |  0.008 | torch.Size([64, 64, 3, 3]) || model.3.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.3.bias
 | -0.000 | -0.036 |  0.031 |  0.008 | torch.Size([64, 64, 3, 3]) || model.6.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.6.bias
 | -0.000 | -0.036 |  0.034 |  0.008 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.000 |  0.000 |  0.000 |  0.000 | torch.Size([64]) || model.8.bias
 | -0.000 | -0.026 |  0.027 |  0.008 | torch.Size([3, 64, 3, 3]) || model.10.weight

22-10-28 16:48:51.690 : <epoch:  7, iter:     200, lr:1.000e-04> G_loss: 1.060e-01 
22-10-28 16:50:54.521 : <epoch: 15, iter:     400, lr:1.000e-04> G_loss: 7.294e-02 
22-10-28 16:52:57.824 : <epoch: 23, iter:     600, lr:1.000e-04> G_loss: 6.641e-02 
22-10-28 16:54:59.772 : <epoch: 31, iter:     800, lr:1.000e-04> G_loss: 6.496e-02 
22-10-28 16:57:02.083 : <epoch: 39, iter:   1,000, lr:1.000e-04> G_loss: 6.369e-02 
22-10-28 16:59:03.999 : <epoch: 47, iter:   1,200, lr:1.000e-04> G_loss: 5.363e-02 
22-10-28 17:01:06.749 : <epoch: 55, iter:   1,400, lr:1.000e-04> G_loss: 4.902e-02 
22-10-28 17:03:09.140 : <epoch: 63, iter:   1,600, lr:1.000e-04> G_loss: 4.747e-02 
22-10-28 17:05:16.828 : <epoch: 71, iter:   1,800, lr:1.000e-04> G_loss: 3.869e-02 
22-10-28 17:07:20.293 : <epoch: 79, iter:   2,000, lr:1.000e-04> G_loss: 4.224e-02 
22-10-28 17:09:26.189 : <epoch: 87, iter:   2,200, lr:1.000e-04> G_loss: 3.648e-02 
22-10-28 17:11:27.186 : <epoch: 95, iter:   2,400, lr:1.000e-04> G_loss: 4.513e-02 
22-10-28 17:13:27.809 : <epoch:103, iter:   2,600, lr:1.000e-04> G_loss: 4.072e-02 
22-10-28 17:15:28.572 : <epoch:111, iter:   2,800, lr:1.000e-04> G_loss: 5.038e-02 
22-10-28 17:17:29.741 : <epoch:119, iter:   3,000, lr:1.000e-04> G_loss: 3.566e-02 
22-10-28 17:19:30.707 : <epoch:127, iter:   3,200, lr:1.000e-04> G_loss: 4.474e-02 
22-10-28 17:21:32.271 : <epoch:135, iter:   3,400, lr:1.000e-04> G_loss: 4.579e-02 
22-10-28 17:23:33.346 : <epoch:143, iter:   3,600, lr:1.000e-04> G_loss: 3.900e-02 
22-10-28 17:25:34.408 : <epoch:151, iter:   3,800, lr:1.000e-04> G_loss: 3.979e-02 
22-10-28 17:27:35.360 : <epoch:159, iter:   4,000, lr:1.000e-04> G_loss: 4.464e-02 
22-10-28 17:29:36.045 : <epoch:167, iter:   4,200, lr:1.000e-04> G_loss: 3.866e-02 
22-10-28 17:31:36.714 : <epoch:175, iter:   4,400, lr:1.000e-04> G_loss: 4.086e-02 
22-10-28 17:33:37.762 : <epoch:183, iter:   4,600, lr:1.000e-04> G_loss: 4.207e-02 
22-10-28 17:35:38.709 : <epoch:191, iter:   4,800, lr:1.000e-04> G_loss: 4.068e-02 
22-10-28 17:37:39.927 : <epoch:199, iter:   5,000, lr:1.000e-04> G_loss: 4.220e-02 
22-10-28 17:37:39.927 : Saving the model.
22-10-28 17:37:41.657 : ---1-->   baby.bmp | PSNR: 31.35dB | SSIM: 0.8563
22-10-28 17:37:41.743 : ---2-->   bird.bmp | PSNR: 29.68dB | SSIM: 0.8724
22-10-28 17:37:41.827 : ---3--> butterfly.bmp | PSNR: 23.08dB | SSIM: 0.7938
22-10-28 17:37:41.911 : ---4-->   head.bmp | PSNR: 29.20dB | SSIM: 0.6934
22-10-28 17:37:42.003 : ---5-->  woman.bmp | PSNR: 26.92dB | SSIM: 0.8602
22-10-28 17:37:42.173 : <epoch:199, iter:   5,000, Average PSNR : 28.04dB, Average SSIM : 0.8152

22-10-28 17:39:42.884 : <epoch:207, iter:   5,200, lr:1.000e-04> G_loss: 4.313e-02 
22-10-28 17:41:43.601 : <epoch:215, iter:   5,400, lr:1.000e-04> G_loss: 4.138e-02 
22-10-28 17:43:44.427 : <epoch:223, iter:   5,600, lr:1.000e-04> G_loss: 4.557e-02 
22-10-28 17:45:45.424 : <epoch:231, iter:   5,800, lr:1.000e-04> G_loss: 4.141e-02 
22-10-28 17:47:46.264 : <epoch:239, iter:   6,000, lr:1.000e-04> G_loss: 4.418e-02 
22-10-28 17:49:47.199 : <epoch:247, iter:   6,200, lr:1.000e-04> G_loss: 3.570e-02 
22-10-28 17:51:47.681 : <epoch:255, iter:   6,400, lr:1.000e-04> G_loss: 3.609e-02 
22-10-28 17:53:47.878 : <epoch:263, iter:   6,600, lr:1.000e-04> G_loss: 4.016e-02 
22-10-28 17:55:48.501 : <epoch:271, iter:   6,800, lr:1.000e-04> G_loss: 4.071e-02 
22-10-28 17:57:49.090 : <epoch:279, iter:   7,000, lr:1.000e-04> G_loss: 4.846e-02 
22-10-28 17:59:49.775 : <epoch:287, iter:   7,200, lr:1.000e-04> G_loss: 4.002e-02 
22-10-28 18:01:50.795 : <epoch:295, iter:   7,400, lr:1.000e-04> G_loss: 3.917e-02 
22-10-28 18:03:51.346 : <epoch:303, iter:   7,600, lr:1.000e-04> G_loss: 4.272e-02 
22-10-28 18:05:52.203 : <epoch:311, iter:   7,800, lr:1.000e-04> G_loss: 4.127e-02 
22-10-28 18:07:52.966 : <epoch:319, iter:   8,000, lr:1.000e-04> G_loss: 4.037e-02 
22-10-28 18:09:53.729 : <epoch:327, iter:   8,200, lr:1.000e-04> G_loss: 4.525e-02 
22-10-28 18:11:54.727 : <epoch:335, iter:   8,400, lr:1.000e-04> G_loss: 3.465e-02 
22-10-28 18:13:56.070 : <epoch:343, iter:   8,600, lr:1.000e-04> G_loss: 4.702e-02 
22-10-28 18:15:57.179 : <epoch:351, iter:   8,800, lr:1.000e-04> G_loss: 3.822e-02 
22-10-28 18:17:58.115 : <epoch:359, iter:   9,000, lr:1.000e-04> G_loss: 4.119e-02 
22-10-28 18:19:58.875 : <epoch:367, iter:   9,200, lr:1.000e-04> G_loss: 3.514e-02 
22-10-28 18:22:00.255 : <epoch:375, iter:   9,400, lr:1.000e-04> G_loss: 4.399e-02 
22-10-28 18:24:01.201 : <epoch:383, iter:   9,600, lr:1.000e-04> G_loss: 4.065e-02 
22-10-28 18:26:01.712 : <epoch:391, iter:   9,800, lr:1.000e-04> G_loss: 3.923e-02 
22-10-28 18:28:02.476 : <epoch:399, iter:  10,000, lr:1.000e-04> G_loss: 3.556e-02 
22-10-28 18:28:02.476 : Saving the model.
22-10-28 18:28:04.093 : ---1-->   baby.bmp | PSNR: 31.81dB | SSIM: 0.8627
22-10-28 18:28:04.193 : ---2-->   bird.bmp | PSNR: 30.66dB | SSIM: 0.8938
22-10-28 18:28:04.276 : ---3--> butterfly.bmp | PSNR: 24.48dB | SSIM: 0.8489
22-10-28 18:28:04.362 : ---4-->   head.bmp | PSNR: 29.58dB | SSIM: 0.7073
22-10-28 18:28:04.430 : ---5-->  woman.bmp | PSNR: 28.16dB | SSIM: 0.8848
22-10-28 18:28:04.600 : <epoch:399, iter:  10,000, Average PSNR : 28.94dB, Average SSIM : 0.8395

22-10-28 18:30:05.417 : <epoch:407, iter:  10,200, lr:1.000e-04> G_loss: 4.285e-02 
22-10-28 18:32:06.023 : <epoch:415, iter:  10,400, lr:1.000e-04> G_loss: 4.273e-02 
22-10-28 18:34:06.394 : <epoch:423, iter:  10,600, lr:1.000e-04> G_loss: 4.529e-02 
22-10-28 18:36:07.506 : <epoch:431, iter:  10,800, lr:1.000e-04> G_loss: 4.493e-02 
22-10-28 18:38:08.108 : <epoch:439, iter:  11,000, lr:1.000e-04> G_loss: 3.799e-02 
22-10-28 18:40:08.933 : <epoch:447, iter:  11,200, lr:1.000e-04> G_loss: 3.857e-02 
22-10-28 18:42:09.600 : <epoch:455, iter:  11,400, lr:1.000e-04> G_loss: 3.808e-02 
22-10-28 18:44:10.442 : <epoch:463, iter:  11,600, lr:1.000e-04> G_loss: 4.038e-02 
22-10-28 18:46:11.173 : <epoch:471, iter:  11,800, lr:1.000e-04> G_loss: 4.003e-02 
22-10-28 18:48:11.749 : <epoch:479, iter:  12,000, lr:1.000e-04> G_loss: 3.609e-02 
22-10-28 18:50:12.291 : <epoch:487, iter:  12,200, lr:1.000e-04> G_loss: 4.066e-02 
22-10-28 18:52:13.132 : <epoch:495, iter:  12,400, lr:1.000e-04> G_loss: 3.928e-02 
22-10-28 18:54:13.643 : <epoch:503, iter:  12,600, lr:1.000e-04> G_loss: 4.338e-02 
22-10-28 18:56:14.375 : <epoch:511, iter:  12,800, lr:1.000e-04> G_loss: 3.646e-02 
22-10-28 18:58:15.153 : <epoch:519, iter:  13,000, lr:1.000e-04> G_loss: 4.654e-02 
22-10-28 19:00:15.445 : <epoch:527, iter:  13,200, lr:1.000e-04> G_loss: 3.969e-02 
22-10-28 19:02:16.271 : <epoch:535, iter:  13,400, lr:1.000e-04> G_loss: 3.738e-02 
22-10-28 19:04:16.454 : <epoch:543, iter:  13,600, lr:1.000e-04> G_loss: 3.879e-02 
22-10-28 19:06:17.060 : <epoch:551, iter:  13,800, lr:1.000e-04> G_loss: 3.629e-02 
22-10-28 19:08:17.812 : <epoch:559, iter:  14,000, lr:1.000e-04> G_loss: 3.968e-02 
22-10-28 19:10:18.461 : <epoch:567, iter:  14,200, lr:1.000e-04> G_loss: 3.516e-02 
22-10-28 19:12:19.160 : <epoch:575, iter:  14,400, lr:1.000e-04> G_loss: 3.415e-02 
22-10-28 19:14:19.843 : <epoch:583, iter:  14,600, lr:1.000e-04> G_loss: 3.169e-02 
22-10-28 19:16:20.027 : <epoch:591, iter:  14,800, lr:1.000e-04> G_loss: 4.156e-02 
22-10-28 19:18:20.680 : <epoch:599, iter:  15,000, lr:1.000e-04> G_loss: 4.522e-02 
22-10-28 19:18:20.680 : Saving the model.
22-10-28 19:18:22.297 : ---1-->   baby.bmp | PSNR: 31.96dB | SSIM: 0.8652
22-10-28 19:18:22.384 : ---2-->   bird.bmp | PSNR: 31.17dB | SSIM: 0.9022
22-10-28 19:18:22.474 : ---3--> butterfly.bmp | PSNR: 25.43dB | SSIM: 0.8710
22-10-28 19:18:22.560 : ---4-->   head.bmp | PSNR: 29.71dB | SSIM: 0.7118
22-10-28 19:18:22.625 : ---5-->  woman.bmp | PSNR: 28.68dB | SSIM: 0.8917
22-10-28 19:18:22.797 : <epoch:599, iter:  15,000, Average PSNR : 29.39dB, Average SSIM : 0.8484

22-10-28 19:20:23.542 : <epoch:607, iter:  15,200, lr:1.000e-04> G_loss: 3.580e-02 
22-10-28 19:22:24.729 : <epoch:615, iter:  15,400, lr:1.000e-04> G_loss: 3.681e-02 
22-10-28 19:24:25.037 : <epoch:623, iter:  15,600, lr:1.000e-04> G_loss: 3.790e-02 
22-10-28 19:26:25.863 : <epoch:631, iter:  15,800, lr:1.000e-04> G_loss: 3.878e-02 
22-10-28 19:28:26.327 : <epoch:639, iter:  16,000, lr:1.000e-04> G_loss: 4.181e-02 
22-10-28 19:30:26.681 : <epoch:647, iter:  16,200, lr:1.000e-04> G_loss: 4.723e-02 
22-10-28 19:32:27.272 : <epoch:655, iter:  16,400, lr:1.000e-04> G_loss: 4.031e-02 
22-10-28 19:34:27.695 : <epoch:663, iter:  16,600, lr:1.000e-04> G_loss: 3.930e-02 
22-10-28 19:36:28.154 : <epoch:671, iter:  16,800, lr:1.000e-04> G_loss: 3.832e-02 
22-10-28 19:38:28.698 : <epoch:679, iter:  17,000, lr:1.000e-04> G_loss: 3.687e-02 
22-10-28 19:40:29.351 : <epoch:687, iter:  17,200, lr:1.000e-04> G_loss: 4.161e-02 
22-10-28 19:42:30.255 : <epoch:695, iter:  17,400, lr:1.000e-04> G_loss: 3.915e-02 
22-10-28 19:44:30.938 : <epoch:703, iter:  17,600, lr:1.000e-04> G_loss: 3.893e-02 
22-10-28 19:46:32.299 : <epoch:711, iter:  17,800, lr:1.000e-04> G_loss: 3.985e-02 
22-10-28 19:48:32.641 : <epoch:719, iter:  18,000, lr:1.000e-04> G_loss: 2.554e-02 
22-10-28 19:50:33.196 : <epoch:727, iter:  18,200, lr:1.000e-04> G_loss: 3.757e-02 
22-10-28 19:52:33.822 : <epoch:735, iter:  18,400, lr:1.000e-04> G_loss: 3.605e-02 
22-10-28 19:54:34.737 : <epoch:743, iter:  18,600, lr:1.000e-04> G_loss: 3.396e-02 
22-10-28 19:56:35.751 : <epoch:751, iter:  18,800, lr:1.000e-04> G_loss: 4.154e-02 
22-10-28 19:58:36.576 : <epoch:759, iter:  19,000, lr:1.000e-04> G_loss: 4.053e-02 
22-10-28 20:00:37.918 : <epoch:767, iter:  19,200, lr:1.000e-04> G_loss: 3.571e-02 
22-10-28 20:02:39.137 : <epoch:775, iter:  19,400, lr:1.000e-04> G_loss: 3.618e-02 
22-10-28 20:04:40.259 : <epoch:783, iter:  19,600, lr:1.000e-04> G_loss: 3.742e-02 
22-10-28 20:06:41.131 : <epoch:791, iter:  19,800, lr:1.000e-04> G_loss: 4.080e-02 
22-10-28 20:08:42.135 : <epoch:799, iter:  20,000, lr:1.000e-04> G_loss: 4.469e-02 
22-10-28 20:08:42.135 : Saving the model.
22-10-28 20:08:43.795 : ---1-->   baby.bmp | PSNR: 31.73dB | SSIM: 0.8661
22-10-28 20:08:43.879 : ---2-->   bird.bmp | PSNR: 31.46dB | SSIM: 0.9053
22-10-28 20:08:43.965 : ---3--> butterfly.bmp | PSNR: 25.65dB | SSIM: 0.8767
22-10-28 20:08:44.064 : ---4-->   head.bmp | PSNR: 29.75dB | SSIM: 0.7153
22-10-28 20:08:44.133 : ---5-->  woman.bmp | PSNR: 28.74dB | SSIM: 0.8939
22-10-28 20:08:44.327 : <epoch:799, iter:  20,000, Average PSNR : 29.47dB, Average SSIM : 0.8514

23-06-11 22:38:35.400 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: superresolution\msrresnet_psnr\models\20000_G.pth
    pretrained_netE: superresolution\msrresnet_psnr\models\20000_E.pth
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

23-06-11 22:38:35.406 : Number of train images: 5, iters: 1
23-06-11 22:40:20.894 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: superresolution\msrresnet_psnr\models\20000_G.pth
    pretrained_netE: superresolution\msrresnet_psnr\models\20000_E.pth
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

23-06-11 22:40:20.896 : Number of train images: 5, iters: 1
23-06-11 22:55:00.915 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: superresolution\msrresnet_psnr\models\20000_G.pth
    pretrained_netE: superresolution\msrresnet_psnr\models\20000_E.pth
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

23-06-11 22:55:00.916 : Number of train images: 5, iters: 1
23-06-12 12:56:06.504 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: superresolution\msrresnet_psnr\models\20000_G.pth
    pretrained_netE: superresolution\msrresnet_psnr\models\20000_E.pth
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

23-06-12 12:56:06.505 : Number of train images: 5, iters: 1
23-06-12 13:07:56.511 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: superresolution\msrresnet_psnr\models\20000_G.pth
    pretrained_netE: superresolution\msrresnet_psnr\models\20000_E.pth
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

23-06-12 13:07:56.513 : Number of train images: 5, iters: 1
23-06-12 13:07:56.731 : 
Networks name: MSRResNet0
Params number: 1332928
Net structure:
MSRResNet0(
  (model): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Identity + 
    |Sequential(
    |  (0): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (1): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (2): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (3): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (4): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (5): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (6): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (7): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (8): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (9): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (10): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (11): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (12): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (13): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (14): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (15): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |)
    (2): Upsample(scale_factor=2.0, mode='nearest')
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace=True)
    (5): Upsample(scale_factor=2.0, mode='nearest')
    (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
)

23-06-12 13:07:57.202 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.079 |  0.100 |  0.027 | torch.Size([64, 3, 3, 3]) || model.0.weight
 | -0.000 | -0.011 |  0.010 |  0.006 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.179 |  0.181 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.0.res.0.weight
 | -0.001 | -0.024 |  0.014 |  0.006 | torch.Size([64]) || model.1.sub.0.res.0.bias
 |  0.000 | -0.138 |  0.168 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.0.res.2.weight
 |  0.000 | -0.014 |  0.009 |  0.004 | torch.Size([64]) || model.1.sub.0.res.2.bias
 |  0.000 | -0.119 |  0.101 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.1.res.0.weight
 | -0.003 | -0.043 |  0.019 |  0.011 | torch.Size([64]) || model.1.sub.1.res.0.bias
 |  0.000 | -0.112 |  0.110 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.1.res.2.weight
 |  0.000 | -0.014 |  0.008 |  0.004 | torch.Size([64]) || model.1.sub.1.res.2.bias
 |  0.000 | -0.077 |  0.093 |  0.016 | torch.Size([64, 64, 3, 3]) || model.1.sub.2.res.0.weight
 | -0.005 | -0.035 |  0.010 |  0.010 | torch.Size([64]) || model.1.sub.2.res.0.bias
 |  0.000 | -0.116 |  0.099 |  0.016 | torch.Size([64, 64, 3, 3]) || model.1.sub.2.res.2.weight
 | -0.000 | -0.012 |  0.008 |  0.004 | torch.Size([64]) || model.1.sub.2.res.2.bias
 |  0.001 | -0.133 |  0.122 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.3.res.0.weight
 | -0.006 | -0.039 |  0.013 |  0.011 | torch.Size([64]) || model.1.sub.3.res.0.bias
 |  0.001 | -0.199 |  0.164 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.3.res.2.weight
 |  0.000 | -0.009 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.3.res.2.bias
 |  0.000 | -0.138 |  0.123 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.4.res.0.weight
 | -0.002 | -0.033 |  0.011 |  0.009 | torch.Size([64]) || model.1.sub.4.res.0.bias
 |  0.000 | -0.196 |  0.167 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.4.res.2.weight
 |  0.000 | -0.008 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.4.res.2.bias
 |  0.000 | -0.126 |  0.098 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.5.res.0.weight
 | -0.003 | -0.033 |  0.017 |  0.009 | torch.Size([64]) || model.1.sub.5.res.0.bias
 |  0.000 | -0.226 |  0.125 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.5.res.2.weight
 |  0.000 | -0.007 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.5.res.2.bias
 | -0.000 | -0.143 |  0.120 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.6.res.0.weight
 | -0.003 | -0.028 |  0.018 |  0.009 | torch.Size([64]) || model.1.sub.6.res.0.bias
 | -0.000 | -0.220 |  0.148 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.6.res.2.weight
 | -0.000 | -0.007 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.6.res.2.bias
 |  0.000 | -0.102 |  0.098 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.7.res.0.weight
 | -0.004 | -0.034 |  0.011 |  0.008 | torch.Size([64]) || model.1.sub.7.res.0.bias
 |  0.000 | -0.178 |  0.189 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.7.res.2.weight
 | -0.000 | -0.007 |  0.009 |  0.003 | torch.Size([64]) || model.1.sub.7.res.2.bias
 |  0.000 | -0.116 |  0.129 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.8.res.0.weight
 | -0.004 | -0.019 |  0.007 |  0.006 | torch.Size([64]) || model.1.sub.8.res.0.bias
 | -0.000 | -0.247 |  0.229 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.8.res.2.weight
 | -0.000 | -0.007 |  0.009 |  0.003 | torch.Size([64]) || model.1.sub.8.res.2.bias
 |  0.000 | -0.098 |  0.143 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.9.res.0.weight
 | -0.004 | -0.019 |  0.011 |  0.007 | torch.Size([64]) || model.1.sub.9.res.0.bias
 |  0.000 | -0.163 |  0.149 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.9.res.2.weight
 |  0.000 | -0.006 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.9.res.2.bias
 | -0.000 | -0.121 |  0.105 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.10.res.0.weight
 | -0.003 | -0.018 |  0.013 |  0.007 | torch.Size([64]) || model.1.sub.10.res.0.bias
 | -0.000 | -0.109 |  0.138 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.10.res.2.weight
 | -0.000 | -0.006 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.10.res.2.bias
 |  0.000 | -0.121 |  0.114 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.11.res.0.weight
 | -0.004 | -0.025 |  0.010 |  0.006 | torch.Size([64]) || model.1.sub.11.res.0.bias
 | -0.000 | -0.113 |  0.120 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.11.res.2.weight
 |  0.000 | -0.010 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.11.res.2.bias
 |  0.000 | -0.098 |  0.095 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.12.res.0.weight
 | -0.004 | -0.015 |  0.008 |  0.005 | torch.Size([64]) || model.1.sub.12.res.0.bias
 | -0.000 | -0.130 |  0.141 |  0.021 | torch.Size([64, 64, 3, 3]) || model.1.sub.12.res.2.weight
 |  0.000 | -0.010 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.12.res.2.bias
 |  0.000 | -0.099 |  0.113 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.13.res.0.weight
 | -0.004 | -0.016 |  0.007 |  0.006 | torch.Size([64]) || model.1.sub.13.res.0.bias
 | -0.000 | -0.194 |  0.216 |  0.021 | torch.Size([64, 64, 3, 3]) || model.1.sub.13.res.2.weight
 |  0.000 | -0.012 |  0.007 |  0.003 | torch.Size([64]) || model.1.sub.13.res.2.bias
 |  0.000 | -0.107 |  0.119 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.14.res.0.weight
 | -0.003 | -0.019 |  0.016 |  0.006 | torch.Size([64]) || model.1.sub.14.res.0.bias
 | -0.000 | -0.167 |  0.159 |  0.021 | torch.Size([64, 64, 3, 3]) || model.1.sub.14.res.2.weight
 |  0.000 | -0.014 |  0.009 |  0.004 | torch.Size([64]) || model.1.sub.14.res.2.bias
 |  0.000 | -0.161 |  0.132 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.15.res.0.weight
 | -0.004 | -0.021 |  0.018 |  0.007 | torch.Size([64]) || model.1.sub.15.res.0.bias
 |  0.000 | -0.236 |  0.156 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.15.res.2.weight
 | -0.000 | -0.009 |  0.009 |  0.003 | torch.Size([64]) || model.1.sub.15.res.2.bias
 |  0.000 | -0.171 |  0.132 |  0.016 | torch.Size([64, 64, 3, 3]) || model.1.sub.16.weight
 |  0.000 | -0.021 |  0.016 |  0.006 | torch.Size([64]) || model.1.sub.16.bias
 | -0.000 | -0.114 |  0.123 |  0.015 | torch.Size([64, 64, 3, 3]) || model.3.weight
 |  0.008 | -0.002 |  0.025 |  0.005 | torch.Size([64]) || model.3.bias
 |  0.002 | -0.496 |  0.198 |  0.022 | torch.Size([64, 64, 3, 3]) || model.6.weight
 |  0.010 | -0.004 |  0.017 |  0.005 | torch.Size([64]) || model.6.bias
 |  0.001 | -0.427 |  0.341 |  0.018 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.009 | -0.007 |  0.033 |  0.008 | torch.Size([64]) || model.8.bias
 |  0.006 | -0.318 |  0.255 |  0.034 | torch.Size([3, 64, 3, 3]) || model.10.weight

23-06-13 21:28:45.327 :   task: msrresnet_psnr
  model: plain
  gpu_ids: [0]
  dist: False
  scale: 4
  n_channels: 3
  sigma: 0
  sigma_test: 0
  merge_bn: False
  merge_bn_startpoint: 400000
  path:[
    root: superresolution
    pretrained_netG: superresolution\msrresnet_psnr\models\20000_G.pth
    pretrained_netE: superresolution\msrresnet_psnr\models\20000_E.pth
    task: superresolution\msrresnet_psnr
    log: superresolution\msrresnet_psnr
    options: superresolution\msrresnet_psnr\options
    models: superresolution\msrresnet_psnr\models
    images: superresolution\msrresnet_psnr\images
    pretrained_optimizerG: None
  ]
  datasets:[
    train:[
      name: train_dataset
      dataset_type: sr
      dataroot_H: trainsets/trainH
      dataroot_L: None
      H_size: 96
      dataloader_shuffle: True
      dataloader_num_workers: 8
      dataloader_batch_size: 32
      phase: train
      scale: 4
      n_channels: 3
    ]
    test:[
      name: test_dataset
      dataset_type: sr
      dataroot_H: testsets/set5
      dataroot_L: None
      phase: test
      scale: 4
      n_channels: 3
    ]
  ]
  netG:[
    net_type: msrresnet0
    in_nc: 3
    out_nc: 3
    nc: 64
    nb: 16
    gc: 32
    ng: 2
    reduction: 16
    act_mode: R
    upsample_mode: upconv
    downsample_mode: strideconv
    init_type: orthogonal
    init_bn_type: uniform
    init_gain: 0.2
    scale: 4
  ]
  train:[
    G_lossfn_type: l1
    G_lossfn_weight: 1.0
    E_decay: 0.999
    G_optimizer_type: adam
    G_optimizer_lr: 0.0001
    G_optimizer_wd: 0
    G_optimizer_clipgrad: None
    G_optimizer_reuse: False
    G_scheduler_type: MultiStepLR
    G_scheduler_milestones: [200000, 400000, 600000, 800000, 1000000, 2000000]
    G_scheduler_gamma: 0.5
    G_regularizer_orthstep: None
    G_regularizer_clipstep: None
    G_param_strict: True
    E_param_strict: True
    checkpoint_test: 5000
    checkpoint_save: 5000
    checkpoint_print: 200
    F_feature_layer: 34
    F_weights: 1.0
    F_lossfn_type: l1
    F_use_input_norm: True
    F_use_range_norm: False
  ]
  opt_path: options/train_msrresnet_psnr.json
  is_train: True
  find_unused_parameters: True
  num_gpu: 1
  rank: 0
  world_size: 1

23-06-13 21:28:45.350 : Number of train images: 2,000, iters: 63
23-06-13 21:28:46.189 : 
Networks name: MSRResNet0
Params number: 1332928
Net structure:
MSRResNet0(
  (model): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Identity + 
    |Sequential(
    |  (0): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (1): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (2): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (3): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (4): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (5): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (6): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (7): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (8): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (9): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (10): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (11): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (12): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (13): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (14): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (15): ResBlock(
    |    (res): Sequential(
    |      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |      (1): ReLU(inplace=True)
    |      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |    )
    |  )
    |  (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    |)
    (2): Upsample(scale_factor=2.0, mode='nearest')
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace=True)
    (5): Upsample(scale_factor=2.0, mode='nearest')
    (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
)

23-06-13 21:28:48.887 : 
 |  mean  |  min   |  max   |  std   || shape               
 | -0.001 | -0.079 |  0.100 |  0.027 | torch.Size([64, 3, 3, 3]) || model.0.weight
 | -0.000 | -0.011 |  0.010 |  0.006 | torch.Size([64]) || model.0.bias
 |  0.000 | -0.179 |  0.181 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.0.res.0.weight
 | -0.001 | -0.024 |  0.014 |  0.006 | torch.Size([64]) || model.1.sub.0.res.0.bias
 |  0.000 | -0.138 |  0.168 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.0.res.2.weight
 |  0.000 | -0.014 |  0.009 |  0.004 | torch.Size([64]) || model.1.sub.0.res.2.bias
 |  0.000 | -0.119 |  0.101 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.1.res.0.weight
 | -0.003 | -0.043 |  0.019 |  0.011 | torch.Size([64]) || model.1.sub.1.res.0.bias
 |  0.000 | -0.112 |  0.110 |  0.015 | torch.Size([64, 64, 3, 3]) || model.1.sub.1.res.2.weight
 |  0.000 | -0.014 |  0.008 |  0.004 | torch.Size([64]) || model.1.sub.1.res.2.bias
 |  0.000 | -0.077 |  0.093 |  0.016 | torch.Size([64, 64, 3, 3]) || model.1.sub.2.res.0.weight
 | -0.005 | -0.035 |  0.010 |  0.010 | torch.Size([64]) || model.1.sub.2.res.0.bias
 |  0.000 | -0.116 |  0.099 |  0.016 | torch.Size([64, 64, 3, 3]) || model.1.sub.2.res.2.weight
 | -0.000 | -0.012 |  0.008 |  0.004 | torch.Size([64]) || model.1.sub.2.res.2.bias
 |  0.001 | -0.133 |  0.122 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.3.res.0.weight
 | -0.006 | -0.039 |  0.013 |  0.011 | torch.Size([64]) || model.1.sub.3.res.0.bias
 |  0.001 | -0.199 |  0.164 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.3.res.2.weight
 |  0.000 | -0.009 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.3.res.2.bias
 |  0.000 | -0.138 |  0.123 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.4.res.0.weight
 | -0.002 | -0.033 |  0.011 |  0.009 | torch.Size([64]) || model.1.sub.4.res.0.bias
 |  0.000 | -0.196 |  0.167 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.4.res.2.weight
 |  0.000 | -0.008 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.4.res.2.bias
 |  0.000 | -0.126 |  0.098 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.5.res.0.weight
 | -0.003 | -0.033 |  0.017 |  0.009 | torch.Size([64]) || model.1.sub.5.res.0.bias
 |  0.000 | -0.226 |  0.125 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.5.res.2.weight
 |  0.000 | -0.007 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.5.res.2.bias
 | -0.000 | -0.143 |  0.120 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.6.res.0.weight
 | -0.003 | -0.028 |  0.018 |  0.009 | torch.Size([64]) || model.1.sub.6.res.0.bias
 | -0.000 | -0.220 |  0.148 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.6.res.2.weight
 | -0.000 | -0.007 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.6.res.2.bias
 |  0.000 | -0.102 |  0.098 |  0.017 | torch.Size([64, 64, 3, 3]) || model.1.sub.7.res.0.weight
 | -0.004 | -0.034 |  0.011 |  0.008 | torch.Size([64]) || model.1.sub.7.res.0.bias
 |  0.000 | -0.178 |  0.189 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.7.res.2.weight
 | -0.000 | -0.007 |  0.009 |  0.003 | torch.Size([64]) || model.1.sub.7.res.2.bias
 |  0.000 | -0.116 |  0.129 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.8.res.0.weight
 | -0.004 | -0.019 |  0.007 |  0.006 | torch.Size([64]) || model.1.sub.8.res.0.bias
 | -0.000 | -0.247 |  0.229 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.8.res.2.weight
 | -0.000 | -0.007 |  0.009 |  0.003 | torch.Size([64]) || model.1.sub.8.res.2.bias
 |  0.000 | -0.098 |  0.143 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.9.res.0.weight
 | -0.004 | -0.019 |  0.011 |  0.007 | torch.Size([64]) || model.1.sub.9.res.0.bias
 |  0.000 | -0.163 |  0.149 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.9.res.2.weight
 |  0.000 | -0.006 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.9.res.2.bias
 | -0.000 | -0.121 |  0.105 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.10.res.0.weight
 | -0.003 | -0.018 |  0.013 |  0.007 | torch.Size([64]) || model.1.sub.10.res.0.bias
 | -0.000 | -0.109 |  0.138 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.10.res.2.weight
 | -0.000 | -0.006 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.10.res.2.bias
 |  0.000 | -0.121 |  0.114 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.11.res.0.weight
 | -0.004 | -0.025 |  0.010 |  0.006 | torch.Size([64]) || model.1.sub.11.res.0.bias
 | -0.000 | -0.113 |  0.120 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.11.res.2.weight
 |  0.000 | -0.010 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.11.res.2.bias
 |  0.000 | -0.098 |  0.095 |  0.018 | torch.Size([64, 64, 3, 3]) || model.1.sub.12.res.0.weight
 | -0.004 | -0.015 |  0.008 |  0.005 | torch.Size([64]) || model.1.sub.12.res.0.bias
 | -0.000 | -0.130 |  0.141 |  0.021 | torch.Size([64, 64, 3, 3]) || model.1.sub.12.res.2.weight
 |  0.000 | -0.010 |  0.008 |  0.003 | torch.Size([64]) || model.1.sub.12.res.2.bias
 |  0.000 | -0.099 |  0.113 |  0.019 | torch.Size([64, 64, 3, 3]) || model.1.sub.13.res.0.weight
 | -0.004 | -0.016 |  0.007 |  0.006 | torch.Size([64]) || model.1.sub.13.res.0.bias
 | -0.000 | -0.194 |  0.216 |  0.021 | torch.Size([64, 64, 3, 3]) || model.1.sub.13.res.2.weight
 |  0.000 | -0.012 |  0.007 |  0.003 | torch.Size([64]) || model.1.sub.13.res.2.bias
 |  0.000 | -0.107 |  0.119 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.14.res.0.weight
 | -0.003 | -0.019 |  0.016 |  0.006 | torch.Size([64]) || model.1.sub.14.res.0.bias
 | -0.000 | -0.167 |  0.159 |  0.021 | torch.Size([64, 64, 3, 3]) || model.1.sub.14.res.2.weight
 |  0.000 | -0.014 |  0.009 |  0.004 | torch.Size([64]) || model.1.sub.14.res.2.bias
 |  0.000 | -0.161 |  0.132 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.15.res.0.weight
 | -0.004 | -0.021 |  0.018 |  0.007 | torch.Size([64]) || model.1.sub.15.res.0.bias
 |  0.000 | -0.236 |  0.156 |  0.020 | torch.Size([64, 64, 3, 3]) || model.1.sub.15.res.2.weight
 | -0.000 | -0.009 |  0.009 |  0.003 | torch.Size([64]) || model.1.sub.15.res.2.bias
 |  0.000 | -0.171 |  0.132 |  0.016 | torch.Size([64, 64, 3, 3]) || model.1.sub.16.weight
 |  0.000 | -0.021 |  0.016 |  0.006 | torch.Size([64]) || model.1.sub.16.bias
 | -0.000 | -0.114 |  0.123 |  0.015 | torch.Size([64, 64, 3, 3]) || model.3.weight
 |  0.008 | -0.002 |  0.025 |  0.005 | torch.Size([64]) || model.3.bias
 |  0.002 | -0.496 |  0.198 |  0.022 | torch.Size([64, 64, 3, 3]) || model.6.weight
 |  0.010 | -0.004 |  0.017 |  0.005 | torch.Size([64]) || model.6.bias
 |  0.001 | -0.427 |  0.341 |  0.018 | torch.Size([64, 64, 3, 3]) || model.8.weight
 |  0.009 | -0.007 |  0.033 |  0.008 | torch.Size([64]) || model.8.bias
 |  0.006 | -0.318 |  0.255 |  0.034 | torch.Size([3, 64, 3, 3]) || model.10.weight

23-06-13 21:37:01.358 : <epoch:  3, iter:  20,200, lr:1.000e-04> G_loss: 3.024e-02 
23-06-13 21:44:53.008 : <epoch:  6, iter:  20,400, lr:1.000e-04> G_loss: 3.096e-02 
23-06-13 21:51:13.130 : <epoch:  9, iter:  20,600, lr:1.000e-04> G_loss: 4.415e-02 
23-06-13 21:53:46.704 : <epoch: 12, iter:  20,800, lr:1.000e-04> G_loss: 4.092e-02 
23-06-13 21:56:38.585 : <epoch: 16, iter:  21,000, lr:1.000e-04> G_loss: 3.730e-02 
23-06-13 21:59:16.405 : <epoch: 19, iter:  21,200, lr:1.000e-04> G_loss: 3.204e-02 
23-06-13 22:01:57.649 : <epoch: 22, iter:  21,400, lr:1.000e-04> G_loss: 3.793e-02 
23-06-13 22:04:47.073 : <epoch: 25, iter:  21,600, lr:1.000e-04> G_loss: 4.058e-02 
23-06-13 22:07:59.442 : <epoch: 29, iter:  21,800, lr:1.000e-04> G_loss: 5.081e-02 
23-06-13 22:10:38.910 : <epoch: 32, iter:  22,000, lr:1.000e-04> G_loss: 3.142e-02 
23-06-13 22:13:25.376 : <epoch: 35, iter:  22,200, lr:1.000e-04> G_loss: 3.139e-02 
23-06-13 22:16:24.237 : <epoch: 38, iter:  22,400, lr:1.000e-04> G_loss: 3.956e-02 
23-06-13 22:18:59.088 : <epoch: 41, iter:  22,600, lr:1.000e-04> G_loss: 3.448e-02 
23-06-13 22:22:04.242 : <epoch: 45, iter:  22,800, lr:1.000e-04> G_loss: 3.544e-02 
23-06-13 22:24:48.726 : <epoch: 48, iter:  23,000, lr:1.000e-04> G_loss: 3.720e-02 
23-06-13 22:27:33.260 : <epoch: 51, iter:  23,200, lr:1.000e-04> G_loss: 3.746e-02 
23-06-13 22:30:10.514 : <epoch: 54, iter:  23,400, lr:1.000e-04> G_loss: 3.733e-02 
23-06-13 22:33:09.135 : <epoch: 58, iter:  23,600, lr:1.000e-04> G_loss: 3.332e-02 
23-06-13 22:36:02.251 : <epoch: 61, iter:  23,800, lr:1.000e-04> G_loss: 3.764e-02 
23-06-13 22:38:33.971 : <epoch: 64, iter:  24,000, lr:1.000e-04> G_loss: 2.842e-02 
23-06-13 22:41:33.503 : <epoch: 67, iter:  24,200, lr:1.000e-04> G_loss: 3.003e-02 
23-06-13 22:44:17.086 : <epoch: 70, iter:  24,400, lr:1.000e-04> G_loss: 3.210e-02 
23-06-13 22:47:25.781 : <epoch: 74, iter:  24,600, lr:1.000e-04> G_loss: 3.546e-02 
23-06-13 22:50:05.699 : <epoch: 77, iter:  24,800, lr:1.000e-04> G_loss: 3.815e-02 
23-06-13 22:53:03.698 : <epoch: 80, iter:  25,000, lr:1.000e-04> G_loss: 4.562e-02 
23-06-13 22:53:03.698 : Saving the model.
23-06-13 22:53:08.620 : ---1--> img_001.png | PSNR: 32.00dB | SSIM: 0.8655 | BER: 0.2665
23-06-13 22:53:08.695 : ---2--> img_002.png | PSNR: 31.83dB | SSIM: 0.9136 | BER: 0.2564
23-06-13 22:53:08.771 : ---3--> img_003.png | PSNR: 25.84dB | SSIM: 0.8809 | BER: 0.3141
23-06-13 22:53:08.835 : ---4--> img_004.png | PSNR: 29.82dB | SSIM: 0.7156 | BER: 0.2886
23-06-13 22:53:08.887 : ---5--> img_005.png | PSNR: 28.81dB | SSIM: 0.8943 | BER: 0.2689
23-06-13 22:53:09.917 : <epoch: 80, validation-iter:  25,000, Average PSNR : 29.660dB, Average SSIM : 0.8540, Average BER : 0.2789

23-06-13 22:55:49.577 : <epoch: 83, iter:  25,200, lr:1.000e-04> G_loss: 4.103e-02 
23-06-13 22:58:41.377 : <epoch: 87, iter:  25,400, lr:1.000e-04> G_loss: 4.293e-02 
23-06-13 23:01:47.727 : <epoch: 90, iter:  25,600, lr:1.000e-04> G_loss: 3.027e-02 
23-06-13 23:04:22.344 : <epoch: 93, iter:  25,800, lr:1.000e-04> G_loss: 3.540e-02 
23-06-13 23:06:57.214 : <epoch: 96, iter:  26,000, lr:1.000e-04> G_loss: 3.364e-02 
23-06-13 23:09:54.682 : <epoch: 99, iter:  26,200, lr:1.000e-04> G_loss: 4.076e-02 
23-06-13 23:13:01.179 : <epoch:103, iter:  26,400, lr:1.000e-04> G_loss: 2.724e-02 
23-06-13 23:15:34.669 : <epoch:106, iter:  26,600, lr:1.000e-04> G_loss: 3.549e-02 
23-06-13 23:18:10.793 : <epoch:109, iter:  26,800, lr:1.000e-04> G_loss: 3.311e-02 
23-06-13 23:20:49.749 : <epoch:112, iter:  27,000, lr:1.000e-04> G_loss: 3.160e-02 
23-06-13 23:23:54.646 : <epoch:116, iter:  27,200, lr:1.000e-04> G_loss: 3.525e-02 
23-06-13 23:26:29.702 : <epoch:119, iter:  27,400, lr:1.000e-04> G_loss: 3.265e-02 
23-06-13 23:29:05.658 : <epoch:122, iter:  27,600, lr:1.000e-04> G_loss: 3.517e-02 
23-06-13 23:31:39.049 : <epoch:125, iter:  27,800, lr:1.000e-04> G_loss: 3.023e-02 
23-06-13 23:34:34.287 : <epoch:129, iter:  28,000, lr:1.000e-04> G_loss: 2.996e-02 
23-06-13 23:37:08.322 : <epoch:132, iter:  28,200, lr:1.000e-04> G_loss: 3.380e-02 
23-06-13 23:39:41.960 : <epoch:135, iter:  28,400, lr:1.000e-04> G_loss: 3.575e-02 
23-06-13 23:42:25.136 : <epoch:138, iter:  28,600, lr:1.000e-04> G_loss: 3.602e-02 
23-06-13 23:45:07.447 : <epoch:141, iter:  28,800, lr:1.000e-04> G_loss: 2.835e-02 
23-06-13 23:48:08.018 : <epoch:145, iter:  29,000, lr:1.000e-04> G_loss: 3.162e-02 
23-06-13 23:50:44.112 : <epoch:148, iter:  29,200, lr:1.000e-04> G_loss: 3.615e-02 
23-06-13 23:53:43.832 : <epoch:151, iter:  29,400, lr:1.000e-04> G_loss: 3.755e-02 
23-06-13 23:56:35.842 : <epoch:154, iter:  29,600, lr:1.000e-04> G_loss: 3.818e-02 
23-06-13 23:59:22.965 : <epoch:158, iter:  29,800, lr:1.000e-04> G_loss: 2.898e-02 
23-06-14 00:02:21.181 : <epoch:161, iter:  30,000, lr:1.000e-04> G_loss: 3.743e-02 
23-06-14 00:02:21.181 : Saving the model.
23-06-14 00:02:27.482 : ---1--> img_001.png | PSNR: 31.58dB | SSIM: 0.8661 | BER: 0.2968
23-06-14 00:02:27.718 : ---2--> img_002.png | PSNR: 31.74dB | SSIM: 0.9104 | BER: 0.2640
23-06-14 00:02:27.952 : ---3--> img_003.png | PSNR: 25.98dB | SSIM: 0.8857 | BER: 0.3241
23-06-14 00:02:28.071 : ---4--> img_004.png | PSNR: 29.70dB | SSIM: 0.7151 | BER: 0.2920
23-06-14 00:02:28.210 : ---5--> img_005.png | PSNR: 28.53dB | SSIM: 0.8952 | BER: 0.2981
23-06-14 00:02:28.758 : <epoch:161, validation-iter:  30,000, Average PSNR : 29.504dB, Average SSIM : 0.8545, Average BER : 0.2950

23-06-14 00:08:31.438 : <epoch:164, iter:  30,200, lr:1.000e-04> G_loss: 3.646e-02 
23-06-14 00:11:35.012 : <epoch:167, iter:  30,400, lr:1.000e-04> G_loss: 2.890e-02 
23-06-14 00:14:01.474 : <epoch:170, iter:  30,600, lr:1.000e-04> G_loss: 3.945e-02 
23-06-14 00:16:43.772 : <epoch:174, iter:  30,800, lr:1.000e-04> G_loss: 3.778e-02 
23-06-14 00:19:08.311 : <epoch:177, iter:  31,000, lr:1.000e-04> G_loss: 4.150e-02 
23-06-14 00:21:30.819 : <epoch:180, iter:  31,200, lr:1.000e-04> G_loss: 3.468e-02 
23-06-14 00:23:55.481 : <epoch:183, iter:  31,400, lr:1.000e-04> G_loss: 3.951e-02 
23-06-14 00:26:36.118 : <epoch:187, iter:  31,600, lr:1.000e-04> G_loss: 3.204e-02 
23-06-14 00:29:00.441 : <epoch:190, iter:  31,800, lr:1.000e-04> G_loss: 3.590e-02 
23-06-14 00:31:24.223 : <epoch:193, iter:  32,000, lr:1.000e-04> G_loss: 3.388e-02 
23-06-14 00:33:45.666 : <epoch:196, iter:  32,200, lr:1.000e-04> G_loss: 4.058e-02 
23-06-14 00:36:05.548 : <epoch:199, iter:  32,400, lr:1.000e-04> G_loss: 2.767e-02 
23-06-14 00:38:53.486 : <epoch:203, iter:  32,600, lr:1.000e-04> G_loss: 3.180e-02 
23-06-14 00:41:15.694 : <epoch:206, iter:  32,800, lr:1.000e-04> G_loss: 3.997e-02 
23-06-14 00:43:46.050 : <epoch:209, iter:  33,000, lr:1.000e-04> G_loss: 3.432e-02 
23-06-14 00:46:04.050 : <epoch:212, iter:  33,200, lr:1.000e-04> G_loss: 2.792e-02 
23-06-14 00:48:55.891 : <epoch:216, iter:  33,400, lr:1.000e-04> G_loss: 3.222e-02 
23-06-14 00:51:20.359 : <epoch:219, iter:  33,600, lr:1.000e-04> G_loss: 4.066e-02 
23-06-14 00:53:41.174 : <epoch:222, iter:  33,800, lr:1.000e-04> G_loss: 3.366e-02 
23-06-14 00:56:20.171 : <epoch:225, iter:  34,000, lr:1.000e-04> G_loss: 4.187e-02 
23-06-14 00:58:58.732 : <epoch:229, iter:  34,200, lr:1.000e-04> G_loss: 3.071e-02 
23-06-14 01:01:18.805 : <epoch:232, iter:  34,400, lr:1.000e-04> G_loss: 2.837e-02 
23-06-14 01:03:51.771 : <epoch:235, iter:  34,600, lr:1.000e-04> G_loss: 3.816e-02 
23-06-14 01:06:13.678 : <epoch:238, iter:  34,800, lr:1.000e-04> G_loss: 3.842e-02 
23-06-14 01:08:35.016 : <epoch:241, iter:  35,000, lr:1.000e-04> G_loss: 3.558e-02 
23-06-14 01:08:35.016 : Saving the model.
23-06-14 01:08:37.024 : ---1--> img_001.png | PSNR: 31.92dB | SSIM: 0.8656 | BER: 0.2725
23-06-14 01:08:37.075 : ---2--> img_002.png | PSNR: 31.87dB | SSIM: 0.9146 | BER: 0.2562
23-06-14 01:08:37.116 : ---3--> img_003.png | PSNR: 25.92dB | SSIM: 0.8830 | BER: 0.3149
23-06-14 01:08:37.160 : ---4--> img_004.png | PSNR: 29.83dB | SSIM: 0.7161 | BER: 0.2875
23-06-14 01:08:37.192 : ---5--> img_005.png | PSNR: 28.75dB | SSIM: 0.8956 | BER: 0.2706
23-06-14 01:08:37.534 : <epoch:241, validation-iter:  35,000, Average PSNR : 29.659dB, Average SSIM : 0.8550, Average BER : 0.2803

23-06-14 01:11:13.913 : <epoch:245, iter:  35,200, lr:1.000e-04> G_loss: 3.452e-02 
23-06-14 01:13:36.677 : <epoch:248, iter:  35,400, lr:1.000e-04> G_loss: 3.325e-02 
23-06-14 01:15:58.734 : <epoch:251, iter:  35,600, lr:1.000e-04> G_loss: 3.782e-02 
23-06-14 01:18:19.343 : <epoch:254, iter:  35,800, lr:1.000e-04> G_loss: 4.010e-02 
23-06-14 01:21:11.738 : <epoch:258, iter:  36,000, lr:1.000e-04> G_loss: 3.227e-02 
23-06-14 01:23:32.370 : <epoch:261, iter:  36,200, lr:1.000e-04> G_loss: 2.979e-02 
23-06-14 01:25:49.961 : <epoch:264, iter:  36,400, lr:1.000e-04> G_loss: 3.095e-02 
23-06-14 01:28:17.378 : <epoch:267, iter:  36,600, lr:1.000e-04> G_loss: 3.661e-02 
23-06-14 01:30:37.747 : <epoch:270, iter:  36,800, lr:1.000e-04> G_loss: 3.230e-02 
23-06-14 01:33:13.954 : <epoch:274, iter:  37,000, lr:1.000e-04> G_loss: 2.761e-02 
23-06-14 01:35:36.371 : <epoch:277, iter:  37,200, lr:1.000e-04> G_loss: 2.798e-02 
23-06-14 01:37:54.456 : <epoch:280, iter:  37,400, lr:1.000e-04> G_loss: 4.132e-02 
23-06-14 01:40:25.282 : <epoch:283, iter:  37,600, lr:1.000e-04> G_loss: 4.097e-02 
23-06-14 01:43:06.094 : <epoch:287, iter:  37,800, lr:1.000e-04> G_loss: 3.131e-02 
23-06-14 01:45:27.379 : <epoch:290, iter:  38,000, lr:1.000e-04> G_loss: 3.928e-02 
23-06-14 01:47:47.672 : <epoch:293, iter:  38,200, lr:1.000e-04> G_loss: 3.518e-02 
23-06-14 01:50:06.594 : <epoch:296, iter:  38,400, lr:1.000e-04> G_loss: 3.033e-02 
23-06-14 01:52:33.384 : <epoch:299, iter:  38,600, lr:1.000e-04> G_loss: 3.638e-02 
23-06-14 01:55:14.965 : <epoch:303, iter:  38,800, lr:1.000e-04> G_loss: 3.122e-02 
23-06-14 01:57:37.175 : <epoch:306, iter:  39,000, lr:1.000e-04> G_loss: 3.002e-02 
23-06-14 01:59:58.292 : <epoch:309, iter:  39,200, lr:1.000e-04> G_loss: 3.536e-02 
23-06-14 02:02:38.207 : <epoch:312, iter:  39,400, lr:1.000e-04> G_loss: 4.834e-02 
23-06-14 02:05:14.506 : <epoch:316, iter:  39,600, lr:1.000e-04> G_loss: 3.627e-02 
23-06-14 02:07:36.130 : <epoch:319, iter:  39,800, lr:1.000e-04> G_loss: 3.309e-02 
23-06-14 02:10:04.053 : <epoch:322, iter:  40,000, lr:1.000e-04> G_loss: 3.520e-02 
23-06-14 02:10:04.053 : Saving the model.
23-06-14 02:10:07.460 : ---1--> img_001.png | PSNR: 32.07dB | SSIM: 0.8670 | BER: 0.2625
23-06-14 02:10:07.518 : ---2--> img_002.png | PSNR: 32.00dB | SSIM: 0.9157 | BER: 0.2531
23-06-14 02:10:07.568 : ---3--> img_003.png | PSNR: 26.18dB | SSIM: 0.8887 | BER: 0.3113
23-06-14 02:10:07.622 : ---4--> img_004.png | PSNR: 29.85dB | SSIM: 0.7181 | BER: 0.2874
23-06-14 02:10:07.663 : ---5--> img_005.png | PSNR: 28.90dB | SSIM: 0.8975 | BER: 0.2659
23-06-14 02:10:08.278 : <epoch:322, validation-iter:  40,000, Average PSNR : 29.803dB, Average SSIM : 0.8574, Average BER : 0.2761

23-06-14 02:12:26.966 : <epoch:325, iter:  40,200, lr:1.000e-04> G_loss: 3.070e-02 
23-06-14 02:15:01.834 : <epoch:329, iter:  40,400, lr:1.000e-04> G_loss: 3.044e-02 
23-06-14 02:17:27.251 : <epoch:332, iter:  40,600, lr:1.000e-04> G_loss: 3.571e-02 
23-06-14 02:19:49.070 : <epoch:335, iter:  40,800, lr:1.000e-04> G_loss: 3.618e-02 
23-06-14 02:22:10.428 : <epoch:338, iter:  41,000, lr:1.000e-04> G_loss: 3.251e-02 
23-06-14 02:24:30.191 : <epoch:341, iter:  41,200, lr:1.000e-04> G_loss: 3.209e-02 
23-06-14 02:27:07.872 : <epoch:345, iter:  41,400, lr:1.000e-04> G_loss: 3.500e-02 
23-06-14 02:29:36.739 : <epoch:348, iter:  41,600, lr:1.000e-04> G_loss: 3.854e-02 
23-06-14 02:32:02.210 : <epoch:351, iter:  41,800, lr:1.000e-04> G_loss: 2.794e-02 
23-06-14 02:34:24.971 : <epoch:354, iter:  42,000, lr:1.000e-04> G_loss: 2.524e-02 
23-06-14 02:37:00.922 : <epoch:358, iter:  42,200, lr:1.000e-04> G_loss: 2.764e-02 
23-06-14 02:39:22.812 : <epoch:361, iter:  42,400, lr:1.000e-04> G_loss: 3.721e-02 
23-06-14 02:41:40.541 : <epoch:364, iter:  42,600, lr:1.000e-04> G_loss: 3.374e-02 
23-06-14 02:44:02.313 : <epoch:367, iter:  42,800, lr:1.000e-04> G_loss: 4.114e-02 
23-06-14 02:46:22.289 : <epoch:370, iter:  43,000, lr:1.000e-04> G_loss: 4.153e-02 
23-06-14 02:49:10.624 : <epoch:374, iter:  43,200, lr:1.000e-04> G_loss: 3.532e-02 
23-06-14 02:51:31.606 : <epoch:377, iter:  43,400, lr:1.000e-04> G_loss: 3.319e-02 
23-06-14 02:53:51.303 : <epoch:380, iter:  43,600, lr:1.000e-04> G_loss: 3.396e-02 
23-06-14 02:56:24.625 : <epoch:383, iter:  43,800, lr:1.000e-04> G_loss: 3.054e-02 
23-06-14 02:59:01.666 : <epoch:387, iter:  44,000, lr:1.000e-04> G_loss: 3.011e-02 
23-06-14 03:01:22.153 : <epoch:390, iter:  44,200, lr:1.000e-04> G_loss: 3.547e-02 
23-06-14 03:03:43.370 : <epoch:393, iter:  44,400, lr:1.000e-04> G_loss: 3.829e-02 
23-06-14 03:06:01.097 : <epoch:396, iter:  44,600, lr:1.000e-04> G_loss: 3.169e-02 
23-06-14 03:08:36.003 : <epoch:399, iter:  44,800, lr:1.000e-04> G_loss: 3.430e-02 
